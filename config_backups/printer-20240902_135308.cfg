[include mainsail.cfg]
[include ./Demon_Klipper_Essentials_Unified/*.cfg]
[include ./KAMP_LiTE/*.cfg]
[exclude_object]




[gcode_arcs]
resolution: 1.0

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_2F000C000C51313339373836-if00

[virtual_sdcard]
path: /home/mercury/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

# This file contains common pin mappings for the BIGTREETECH Octopus Max EZ.
# To use this config, the firmware should be compiled for the
# STM32H723 with a "128KiB bootloader" "25 MHz crystal"
# and "USB (on PA11/PA12)" or "CAN bus (on PD0/PD1)".

# See docs/Config_Reference.md for a description of parameters.

[stepper_x]
step_pin: PC13
dir_pin: !PC14
enable_pin: !PE6
microsteps: 16
rotation_distance: 40
endstop_pin: PF0
position_endstop: 0
position_max: 350
homing_speed: 50

[stepper_y]
step_pin: PE4
dir_pin: !PE5
enable_pin: !PE3
microsteps: 16
rotation_distance: 40
endstop_pin: PF2
position_endstop: 0
position_max: 350
homing_speed: 50

[stepper_z]
step_pin: PB8
dir_pin: PB9
enable_pin: !PB7
microsteps: 16
rotation_distance: 4
endstop_pin: probe:z_virtual_endstop
position_min: -5
position_max: 410
homing_speed: 10.0
homing_retract_speed: 4.0
homing_retract_dist: 3.0                # allow sufficient distance for BL Touch probe
second_homing_speed: 2.0   

[stepper_z1]
step_pin: PE1
dir_pin: PE0
enable_pin: !PE2
microsteps: 16
rotation_distance: 4

#[filament_switch_sensor material_0]
#switch_pin: PF1

[extruder]
step_pin: PD3
dir_pin: PD2
enable_pin: !PD4
microsteps: 16
rotation_distance: 33.500
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_only_distance: 750.0
max_extrude_only_velocity: 1000
max_extrude_only_accel: 1000.0
max_extrude_cross_section: 5
heater_pin: PF6 # HE0
sensor_pin:  PB0 # T0
sensor_type: NTC 100K MGB18-104F39050L32
pressure_advance: 0.202
#control: pid
#pid_Kp: 22.2
#pid_Ki: 1.08
#pid_Kd: 114
min_temp: 0
max_temp: 300



[heater_bed]
heater_pin: PF5
sensor_pin: PB1 # TB
sensor_type: EPCOS 100K B57560G104F
#control: pid
#pid_Kp: 690.34
#pid_Ki: 111.47
#pid_Kd: 1068.83
min_temp: 0
max_temp: 140

[fan]
pin: PA6

[heater_fan Extruder]
pin: PA5

[controller_fan Case]
pin: PA4



[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

########################################
# TMC2209 configuration
########################################

[tmc2209 stepper_x]
uart_pin: PG14
diag_pin: PF0
run_current: 0.800
stealthchop_threshold: 999999

[tmc2209 stepper_y]
uart_pin: PG13
diag_pin: PF2
run_current: 0.800
stealthchop_threshold: 999999

[tmc2209 stepper_z]
uart_pin: PG12
diag_pin: PF4
run_current: 0.650
stealthchop_threshold: 999999

[tmc2209 stepper_z1]
uart_pin: PG11
diag_pin: PF3
run_current: 0.650
stealthchop_threshold: 999999


[tmc2209 extruder]
uart_pin: PD7
run_current: 0.800
stealthchop_threshold: 999999

[screws_tilt_adjust]

screw1: 60,40

screw1_name: front_left

screw2: 325,40

screw2_name: front_right

screw3: 60,315

screw3_name: back_left

screw4: 325,315

screw4_name: back_right

# Additional bed leveling screws. At least two screws must be

# defined.

speed: 50

horizontal_move_z: 5

screw_thread: CW-M3
[z_tilt]
z_positions: 
  378.4,180
  -18.4,180
points: 
  319,175
  5,175
speed: 100
horizontal_move_z: 10
retries: 10
retry_tolerance:0.02


[board_pins]
aliases:
    # FPC header, Aliases EXP1 & EXP2 for mini12864
    EXP1_1=PG2, EXP1_2=PD15,
    EXP1_3=PD14, EXP1_4=PD13,
    EXP1_5=PD12, EXP1_6=PD11,
    EXP1_7=PD10, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PE13, EXP2_2=PE12,
    EXP2_3=PG5, EXP2_4=PE11,
    EXP2_5=PG4, EXP2_6=PE14,
    EXP2_7=PG3, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays

# Temp Sensors
[temperature_sensor Raspberry_Pi]
sensor_type: temperature_host

[temperature_sensor mcu]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 90

#[temperature_sensor toolhead_mcu]
#sensor_type: temperature_mcu
#sensor_mcu: toolhead
#min_temp = 0
#max_temp = 100

# The MCU section only applies to the Eddy USB. For Eddy Coil you will use the MCU name of the toolboard that you connected the Eddy Coil to.
[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_45474E621B02DA9A-if00 # This is the serial address of your eddy probe. This can be found by using the terminal of your klipper instance (typically through SSH) and using the command ```ls /dev/serial/by-id``` 
restart_method: command


[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu # Sets the type of sensor for Klipper to read
sensor_mcu: eddy # Sets the MCU of the eddy probe tempereature sensor
min_temp: 10 # Sets the minimum tempereature for eddys tempereature sensor to operate
max_temp: 100 # Sets the maximum tempereature for eddys tempereature sensor to operate

[probe_eddy_current btt_eddy]
sensor_type: ldc1612
z_offset: 1.5
#i2c_address:
i2c_mcu: eddy  # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the MCU you have used.
i2c_bus: i2c0f # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the I2C bus you have used.
# Measure the offsets below using the method described here: https://www.klipper3d.org/Probe_Calibrate.html#calibrating-probe-x-and-y-offsets
# For a standard Voron stealthburner X carriage mount there should be no need to change the defaults below.
x_offset: 0
y_offset: 21.42


[bed_mesh]
horizontal_move_z: 2
speed: 200
# For the mesh dimensions below, the coordinates need to be reachable by the center of the probe. To calculate coordinates that will work, use the formula below:
# mesh x min = position_min_x + greater_of (15mm or x_offset) <--- in this term, only consider the x offset if it is positive, ignore if negative.
# mesh y min = position_min_y + greater_of (15mm or y_offset) <--- in this term, only consider the y offset if it is positive, ignore if negative.
# mesh x max = position_max_x - greater_of (15mm or |x_offset|) <--- in this term, only consider the x offset if it is negative, ignore if positive.
# mesh y max = position_max_y - greater_of (15mm or |y_offset|) <--- in this term, only consider the y offset if it is negative, ignore if positive.
# Example: Consider that you have a 300 x 300 bed with the max x and y positions being 300 and the min being 0. Your probe offsets are -20 for X and 10 for Y
# For mesh x min we ignore the x offset term because it is negative. Therefore mesh x min = 15
# For mesh y min we do not ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y min = 15
# For mesh x max we do not ignore the x offset term because it is negative. It is also greater than 15. Therefore mesh x max = 280
# For mesh y max we ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y max = 285
# The final result would be mesh_min: 15, 15 mesh_max: 280, 285
mesh_min: 40, 40  # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
mesh_max: 300, 300 # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
probe_count: 9, 9
algorithm: bicubic
#scan_overshoot: 8  #uncomment this section if you still have room left over on the X axis for some scan overshoot to product smoother movements and more accurate scanning. Uncommenting this should be fine if you are using a standard voron mount.

# Uncomment this if you are using Eddy as the probe AND the homing endstop
[safe_z_home]
home_xy_position: 175, 175 # Choose an X,Y position that is in the center of your bed. For a 300x300 machine that will be 150, 150. Use the same principle to calculate your bed center.
z_hop: 10
z_hop_speed: 25
speed: 200

###############################Macros and related################################
#This secton contains macros and related config sections. Some should be used, others are optional. Read the comment above each one to find out whether or not to uncomment it for your installation.


# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[save_variables]
filename: ~/printer_data/config/variables.cfg



# Uncomment this if you are using Eddy as the probe AND the homing endstop
[force_move]
enable_force_move: True # Allows a user to move the z axis down if they have no other means of homing Z and need to calibrate the Eddy.



# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[delayed_gcode RESTORE_PROBE_OFFSET]
initial_duration: 1.
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
  {% endif %}



# Uncomment this if you are using Eddy as the probe AND the homing endstop
# Take note of the lines that should only be used if you have a KNOMI installed.
[gcode_macro G28]
rename_existing: G28.1
gcode:
  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg
  G28.1 {rawparams}
  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
    PROBE
    SET_Z_FROM_PROBE
  {% endif %}
  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg



# Uncomment this if you are using Eddy as the probe AND the homing endstop
[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90
    G1 Z{cf.safe_z_home.z_hop}


# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro Z_OFFSET_APPLY_PROBE]
rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
gcode:
  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }



# Uncomment the lines in this macro if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
  {% if params.Z_ADJUST %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
  {% endif %}
  {% if params.Z %} 
    {% set paramList = rawparams.split() %}
    {% for i in range(paramList|length) %}
      {% if paramList[i]=="Z=0" %}
        {% set temp=paramList.pop(i) %}
        {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
        {% if paramList.append(temp) %}{% endif %}
      {% endif %}
    {% endfor %}
    {% set rawparams=paramList|join(' ') %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
  {% endif %}
  SET_GCODE_OFFSET_ORIG { rawparams }



# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  BED_MESH_CLEAR
  G28 X Y
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% endif %}
  PROBE_EDDY_CURRENT_CALIBRATE {rawparams}



#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BTT_BED_MESH_CALIBRATE
gcode:
#  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg
  BTT_BED_MESH_CALIBRATE METHOD=rapid_scan
#  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg

# Proximity switch
#[probe]
#pin: PF11

#[output_pin ps_on_pin]
#pin: PF13

#[output_pin pf12_pin]
#pin: PF12

#[neopixel my_neopixel_1]
#pin: PE10

#[neopixel my_neopixel_2]
#pin: PE9

#[hall_filament_width_sensor]
#adc1: PC0
#adc2: PF10

#[adxl345]
#cs_pin: PF14
#spi_bus: spi4


[printer]
kinematics: cartesian
max_velocity: 200
max_accel: 3000
max_z_velocity: 10
max_z_accel: 100

########################################
#			  SAVE CONFIG              #
########################################

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe_eddy_current btt_eddy]
#*# reg_drive_current = 16
#*# calibrate =
#*# 	0.050000:3252425.980,0.090000:3252252.234,0.130000:3252086.597,
#*# 	0.170000:3251884.950,0.210000:3251680.516,0.250000:3251441.836,
#*# 	0.290000:3251205.722,0.330000:3250790.081,0.370000:3250041.525,
#*# 	0.410000:3249278.509,0.450000:3248490.747,0.490000:3247736.633,
#*# 	0.530000:3246997.921,0.570000:3246262.543,0.610000:3245512.490,
#*# 	0.650000:3244843.807,0.690000:3244125.837,0.730000:3243430.365,
#*# 	0.770000:3242776.172,0.810000:3242126.235,0.850000:3241522.043,
#*# 	0.890000:3240856.828,0.930000:3240196.314,0.970000:3239624.258,
#*# 	1.010000:3239001.192,1.050000:3238399.932,1.090000:3237824.477,
#*# 	1.130000:3237224.921,1.170000:3236671.327,1.210000:3236109.694,
#*# 	1.250000:3235598.320,1.290000:3235098.177,1.330000:3234625.766,
#*# 	1.370000:3234134.084,1.410000:3233631.377,1.450000:3233151.222,
#*# 	1.490000:3232652.133,1.530000:3232181.188,1.570000:3231710.384,
#*# 	1.610000:3231263.573,1.650000:3230804.624,1.690000:3230404.918,
#*# 	1.730000:3229979.482,1.770000:3229569.603,1.810000:3229186.860,
#*# 	1.850000:3228772.200,1.890000:3228364.899,1.930000:3227998.564,
#*# 	1.970000:3227606.887,2.010000:3227251.128,2.050000:3226919.373,
#*# 	2.090000:3226557.523,2.130000:3226193.145,2.170000:3225841.006,
#*# 	2.210000:3225486.383,2.250000:3225171.572,2.290000:3224870.619,
#*# 	2.330000:3224559.594,2.370000:3224220.734,2.410000:3223926.054,
#*# 	2.450000:3223603.707,2.490000:3223314.566,2.530000:3223037.244,
#*# 	2.570000:3222751.176,2.610000:3222481.981,2.650000:3222233.031,
#*# 	2.690000:3221921.050,2.730000:3221675.847,2.770000:3221400.425,
#*# 	2.810000:3221149.193,2.850000:3220902.763,2.890000:3220657.981,
#*# 	2.930000:3220390.963,2.970000:3220168.700,3.010000:3219905.628,
#*# 	3.050000:3219677.966,3.090000:3219456.749,3.130000:3219239.872,
#*# 	3.170000:3219043.767,3.210000:3218819.978,3.250000:3218619.190,
#*# 	3.290000:3218389.558,3.330000:3218187.679,3.370000:3218006.721,
#*# 	3.410000:3217795.479,3.450000:3217598.420,3.490000:3217391.385,
#*# 	3.530000:3217226.349,3.570000:3217029.272,3.610000:3216858.485,
#*# 	3.650000:3216663.778,3.690000:3216494.529,3.730000:3216315.771,
#*# 	3.770000:3216136.504,3.810000:3215963.150,3.850000:3215781.899,
#*# 	3.890000:3215650.799,3.930000:3215488.731,3.970000:3215318.794,
#*# 	4.010000:3215185.166,4.050000:3215025.948
#*#
#*# [extruder]
#*# pid_version = 1
#*# pid_target = 235.00
#*# pid_tolerance = 0.0200
#*# control = pid
#*# pid_kp = 40.840
#*# pid_ki = 17.017
#*# pid_kd = 24.504
#*#
#*# [heater_bed]
#*# pid_version = 1
#*# pid_target = 85.00
#*# pid_tolerance = 0.0200
#*# control = pid
#*# pid_kp = 67.408
#*# pid_ki = 1.040
#*# pid_kd = 1092.014
